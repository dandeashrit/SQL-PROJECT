<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/DANDE DHRUVA HARSHA/Desktop/project sqlite/New Orders.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="2528"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,7:mainPRODUCT"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="ADDRESS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="6" mode="0"/></sort><column_widths><column index="1" value="124"/><column index="2" value="300"/><column index="3" value="300"/><column index="4" value="141"/><column index="5" value="124"/><column index="6" value="89"/><column index="7" value="93"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="ORDER_ITEMS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="102"/><column index="3" value="194"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="PRODUCT" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="2" value="300"/><column index="3" value="217"/><column index="4" value="156"/><column index="5" value="258"/><column index="6" value="52"/><column index="7" value="71"/><column index="8" value="77"/><column index="9" value="81"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="PRODUCT_CLASS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="217"/><column index="2" value="215"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">--1. Write a query to Display the product details (product_class_code, product_id, product_desc, product_price,) as per the following criteria and sort them in descending order of category: a. If the category is 2050, increase the price by 2000 b. If the category is 2051, increase the price by 500 c. If the category is 2052, increase the price by 600. Hint: Use case statement. no permanent change in table required. (60 ROWS) [NOTE: PRODUCT TABLE]

SELECT PRODUCT_CLASS_CODE, PRODUCT_ID, PRODUCT_DESC,
CASE
	WHEN PRODUCT_CLASS_CODE =2050 THEN PRODUCT_PRICE +2000
	WHEN PRODUCT_CLASS_CODE =2051 THEN PRODUCT_PRICE +500
	WHEN PRODUCT_CLASS_CODE =2052 THEN PRODUCT_PRICE +600
	ELSE PRODUCT_PRICE
	END AS PRODUCT_PRICE
FROM PRODUCT
ORDER BY PRODUCT_CLASS_CODE DESC;

--2. Write a query to display (product_class_desc, product_id, product_desc, product_quantity_avail ) and Show inventory status of products as below as per their available quantity: a. For Electronics and Computer categories, if available quantity is &lt;= 10, show 'Low stock', 11 &lt;= qty &lt;= 30, show 'In stock', &gt;= 31, show 'Enough stock' b. For Stationery and Clothes categories, if qty &lt;= 20, show 'Low stock', 21 &lt;= qty &lt;= 80, show 'In stock', &gt;= 81, show 'Enough stock' c. Rest of the categories, if qty &lt;= 15 – 'Low Stock', 16 &lt;= qty &lt;= 50 – 'In Stock', &gt;= 51 – 'Enough stock' For all categories, if available quantity is 0, show 'Out of stock'. Hint: Use case statement. (60 ROWS) [NOTE: TABLES TO BE USED – product, product_class]

SELECT  PC.PRODUCT_CLASS_DESC,P.PRODUCT_ID, P.PRODUCT_DESC, P.PRODUCT_QUANTITY_AVAIL,
CASE WHEN P.PRODUCT_QUANTITY_AVAIL = 0 THEN 'Out Of Stock'
	 WHEN PC.PRODUCT_CLASS_DESC IN ('Electronics','Computer') AND P.PRODUCT_QUANTITY_AVAIL &lt;= 10 THEN 'Low stock'
     WHEN PC.PRODUCT_CLASS_DESC IN ('Electronics','Computer') AND P.PRODUCT_QUANTITY_AVAIL BETWEEN 11 AND 30 THEN 'In stock'
     WHEN PC.PRODUCT_CLASS_DESC IN ('Electronics','Computer') AND P.PRODUCT_QUANTITY_AVAIL &gt;= 31 THEN 'Enough stock' 
     WHEN PC.PRODUCT_CLASS_DESC IN ('Stationery','Clothes')  AND P.PRODUCT_QUANTITY_AVAIL &lt;= 20 THEN 'Low stock'
     WHEN PC.PRODUCT_CLASS_DESC IN ('Stationery','Clothes')  AND P.PRODUCT_QUANTITY_AVAIL BETWEEN 21 and 80 THEN 'In stock'
     WHEN PC.PRODUCT_CLASS_DESC IN ('Stationery','Clothes')  AND P.PRODUCT_QUANTITY_AVAIL &gt;= 81 THEN 'Enough stock' 
	 ELSE 
	 CASE 
     WHEN P.PRODUCT_QUANTITY_AVAIL &lt;= 15 THEN 'Low stock'
     WHEN P.PRODUCT_QUANTITY_AVAIL BETWEEN 16 and 50 then 'In stock'
     WHEN P.PRODUCT_QUANTITY_AVAIL  &gt;= 51 THEN 'Enough stock' 
	 END
END AS INVENTORY_STATUS
FROM PRODUCT P
INNER JOIN PRODUCT_CLASS PC ON P.PRODUCT_CLASS_CODE = PC.PRODUCT_CLASS_CODE

--3. Write a query to Show the count of cities in all countries other than USA &amp; MALAYSIA, with more than 1 city, in the descending order of CITIES. (2 rows) [NOTE: ADDRESS TABLE, Do not use Distinct]

SELECT COUNTRY, count(CITY) 
FROM ADDRESS
WHERE (COUNTRY&lt;&gt;'USA' AND COUNTRY&lt;&gt;'Malaysia')
GROUP BY COUNTRY
HAVING count(CITY)&gt;1
ORDER BY count(CITY) DESC;

--4. Write a query to display the customer_id,customer full name ,city,pincode,and order details (order id, product class desc, product desc, subtotal(product_quantity * product_price)) for orders shipped to cities whose pin codes do not have any 0s in them. Sort the output on customer name and subtotal. (52 ROWS) [NOTE: TABLE TO BE USED - online_customer, address, order_header, order_items, product, product_class]

SELECT ONLINE_CUSTOMER.CUSTOMER_ID, &quot;CUSTOMER_FNAME&quot; || ' ' || &quot;CUSTOMER_LNAME&quot; AS Customer_Full_Name,
ADDRESS.CITY,ADDRESS.PINCODE,
ORDER_HEADER.ORDER_ID, ORDER_HEADER.ORDER_DATE,
PRODUCT.PRODUCT_DESC, (ORDER_ITEMS.PRODUCT_QUANTITY*PRODUCT.PRODUCT_PRICE) AS 'Subtotal'
FROM ONLINE_CUSTOMER
INNER JOIN address ON ONLINE_CUSTOMER.ADDRESS_ID = ADDRESS.ADDRESS_ID
INNER JOIN ORDER_HEADER
ON ONLINE_CUSTOMER.CUSTOMER_ID = ORDER_HEADER.CUSTOMER_ID
INNER JOIN ORDER_ITEMS
ON ORDER_HEADER.ORDER_ID = ORDER_ITEMS.ORDER_ID
INNER JOIN PRODUCT
ON ORDER_ITEMS.PRODUCT_ID = PRODUCT.PRODUCT_ID
WHERE ADDRESS.PINCODE NOT LIKE '%0%'
AND order_header.ORDER_STATUS = 'Shipped'
ORDER BY Customer_Full_Name ASC, Subtotal ASC;

--5. Write a Query to display product id,product description,totalquantity(sum(product quantity) for an item which has been bought maximum no. of times (Quantity Wise) along with product id 201. (USE SUB-QUERY) (1 ROW) [NOTE: ORDER_ITEMS TABLE, PRODUCT TABLE]

SELECT P.PRODUCT_ID ,P.PRODUCT_DESC , SUM(OI.PRODUCT_QUANTITY) AS TotalQuantity
FROM PRODUCT P JOIN ORDER_ITEMS OI
ON P.PRODUCT_ID = OI.PRODUCT_ID
WHERE OI.ORDER_ID=(SELECT max(ORDER_ID) FROM ORDER_ITEMS WHERE PRODUCT_ID=201);

--6. Write a query to display the customer_id,customer name, email and order details (order id, product desc,product qty, subtotal(product_quantity * product_price)) for all customers even if they have not ordered any item.(225 ROWS) [NOTE: TABLE TO BE USED - online_customer, order_header, order_items, product]

SELECT CUSTOMER_ID AS &quot;Customer ID&quot;,CUSTOMER_FNAME || ' ' || CUSTOMER_LNAME AS FullName,
CUSTOMER_EMAIL AS &quot;Email&quot;, ORDER_ID as &quot;Order ID&quot;,
PRODUCT_DESC as &quot;Product_Description&quot;, PRODUCT_QUANTITY As &quot;Product_Quantity&quot;,
(PRODUCT_QUANTITY * PRODUCT_PRICE) AS Subtotal
FROM online_customer   
	NATURAL LEFT JOIN order_header  
	NATURAL LEFT JOIN order_items  
	NATURAL LEFT JOIN product;</sql><sql name="SQL 3">SELECT  PC.PRODUCT_CLASS_DESC,P.PRODUCT_ID, P.PRODUCT_DESC, P.PRODUCT_QUANTITY_AVAIL,
CASE WHEN P.PRODUCT_QUANTITY_AVAIL = 0 THEN 'Out Of Stock'
	 WHEN PC.PRODUCT_CLASS_DESC IN ('Electronics','Computer')  THEN 'Low stock'
     WHEN PC.PRODUCT_CLASS_DESC IN ('Electronics','Computer') THEN 'In stock'
     WHEN PC.PRODUCT_CLASS_DESC IN ('Electronics','Computer') THEN 'Enough stock' 
     WHEN PC.PRODUCT_CLASS_DESC IN ('Stationery','Clothes') THEN 'LOW stock'
     WHEN PC.PRODUCT_CLASS_DESC IN ('Stationery','Clothes') THEN 'In STOCK'
     WHEN PC.PRODUCT_CLASS_DESC IN ('Stationery','Clothes') THEN 'Enough STOCK' 
END AS INVENTORY_STATUS
FROM PRODUCT P
INNER JOIN PRODUCT_CLASS PC ON P.PRODUCT_CLASS_CODE = PC.PRODUCT_CLASS_CODE;

SELECT  PC.PRODUCT_CLASS_DESC,P.PRODUCT_ID, P.PRODUCT_DESC, P.PRODUCT_QUANTITY_AVAIL,
CASE WHEN P.PRODUCT_QUANTITY_AVAIL = 0 THEN 'Out Of Stock'
	 WHEN PC.PRODUCT_CLASS_DESC IN ('Electronics','Computer') AND P.PRODUCT_QUANTITY_AVAIL &lt;= 10 THEN 'Low stock'
     WHEN PC.PRODUCT_CLASS_DESC IN ('Electronics','Computer') AND P.PRODUCT_QUANTITY_AVAIL BETWEEN 11 AND 30 THEN 'In stock'
     WHEN PC.PRODUCT_CLASS_DESC IN ('Electronics','Computer') AND P.PRODUCT_QUANTITY_AVAIL &gt;= 31 THEN 'Enough stock' 
     WHEN PC.PRODUCT_CLASS_DESC IN ('Stationery','Clothes')  AND P.PRODUCT_QUANTITY_AVAIL &lt;= 20 THEN 'Low stock'
     WHEN PC.PRODUCT_CLASS_DESC IN ('Stationery','Clothes')  AND P.PRODUCT_QUANTITY_AVAIL BETWEEN 21 and 80 THEN 'In stock'
     WHEN PC.PRODUCT_CLASS_DESC IN ('Stationery','Clothes')  AND P.PRODUCT_QUANTITY_AVAIL &gt;= 81 THEN 'Enough stock' 
	 ELSE 
	 CASE 
     WHEN P.PRODUCT_QUANTITY_AVAIL &lt;= 15 THEN 'Low stock'
     WHEN P.PRODUCT_QUANTITY_AVAIL BETWEEN 16 and 50 then 'In stock'
     WHEN P.PRODUCT_QUANTITY_AVAIL  &gt;= 51 THEN 'Enough stock' 
	 END
END AS INVENTORY_STATUS

FROM PRODUCT P
INNER JOIN PRODUCT_CLASS PC ON P.PRODUCT_CLASS_CODE = PC.PRODUCT_CLASS_CODE</sql><current_tab id="0"/></tab_sql></sqlb_project>
